<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CW.NETMF.OneWire</name>
    </assembly>
    <members>
        <member name="T:CW.NETMF.Hardware.OneWire">
            <summary>
            Provides 1-Wire master interface functionality.
            </summary>
        </member>
        <member name="F:CW.NETMF.Hardware.OneWire.ReadRom">
            <summary>
            The command used to read the unique identifier of a single slave device.
            </summary>
        </member>
        <member name="F:CW.NETMF.Hardware.OneWire.SkipRom">
            <summary>
            The command used for addressing when no specific slave is targeted.
            </summary>
        </member>
        <member name="F:CW.NETMF.Hardware.OneWire.MatchRom">
            <summary>
            The command used to address individual slave device on the bus.
            </summary>
            <remarks>
            The command followed by a 64-bit unique identifier allows the bus master
            to address a specific slave device. Only the slave that exactly matches
            the 64-bit identifier will respond to the function command issued by
            the master; all other slaves on the bus will wait for a reset pulse.
            </remarks>
        </member>
        <member name="F:CW.NETMF.Hardware.OneWire.SearchRom">
            <summary>
            The command used to perform search operations on the bus.
            </summary>
        </member>
        <member name="M:CW.NETMF.Hardware.OneWire.#ctor(Microsoft.SPOT.Hardware.Cpu.Pin)">
            <summary>
            Initializes a new instance of the <see cref="T:CW.NETMF.Hardware.OneWire"/> class.
            </summary>
            <param name="portId">The identifier (ID) for the port.</param>
            <remarks>
            The method delays for the required reset recovery time (480 Âµs)
            to make sure the first rising edge is not interpreted by a slave
            device as the end of a reset pulse.
            </remarks>
        </member>
        <member name="M:CW.NETMF.Hardware.OneWire.Finalize">
            <summary>
            Deletes an instance of the <see cref="T:CW.NETMF.Hardware.OneWire"/> class.
            </summary>
        </member>
        <member name="M:CW.NETMF.Hardware.OneWire.Dispose">
            <summary>
            Releases resources used by this <see cref="T:CW.NETMF.Hardware.OneWire"/> object.
            </summary>
        </member>
        <member name="M:CW.NETMF.Hardware.OneWire.Dispose(System.Boolean)">
            <summary>
            Releases the pin associated with the <see cref="T:CW.NETMF.Hardware.OneWire"/> object
            and marks it as available for reuse.
            </summary>
            <param name="disposing">
            <b>true</b> to release both managed and unmanaged resources;
            <b>false</b> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:CW.NETMF.Hardware.OneWire.Reset">
            <summary>
            Initiates transmission on the 1-Wire bus.
            </summary>
            <returns>
            <b>true</b> if one or more devices are present on the bus;
            <b>false</b> if no devices were detected on the bus.
            </returns>
        </member>
        <member name="M:CW.NETMF.Hardware.OneWire.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the bus.
            </summary>
            <param name="buffer">
            An array of bytes. When this method returns, the <paramref name="buffer"/>
            contains the specified byte array with the values between <paramref name="index"/>
            and (<paramref name="index"/> + <paramref name="count"/> - 1) replaced
            by the bytes read from the bus.
            </param>
            <param name="index">
            The zero-based byte index in <paramref name="buffer"/> at which
            to begin storing the data read from the bus.
            </param>
            <param name="count">
            The maximum number of bytes to be read from the bus, or -1 to read
            from <paramref name="index"/> to the end of <paramref name="buffer"/>.
            </param>
            <returns>
            The total number of bytes read into the buffer. This is always the
            number of bytes requested, if there is no device on the bus the byte
            read is 0xFF.
            </returns>
            <exception cref="T:System.ArgumentException">
            The sum of <paramref name="index"/> and <paramref name="count"/>
            is larger than the <paramref name="buffer"/> length.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is negative or <paramref name="count"/> is less than -1.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The method was called after the object was disposed.
            </exception>
        </member>
        <member name="M:CW.NETMF.Hardware.OneWire.ReadBit">
            <summary>
            Reads a bit from the bus.
            </summary>
            <returns>
            The byte that has the least significant bit (LSB) set to the value read
            from the bus. If there is no device on the bus the return value is 0x01.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The method was called after the object was disposed.
            </exception>
        </member>
        <member name="M:CW.NETMF.Hardware.OneWire.ReadByte">
            <summary>
            Reads a byte from the bus.
            </summary>
            <returns>
            The byte read. If there is no device on the bus the return value is 0xFF.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The method was called after the object was disposed.
            </exception>
        </member>
        <member name="M:CW.NETMF.Hardware.OneWire.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes onto the bus.
            </summary>
            <param name="buffer">
            An array of bytes. This method writes <paramref name="count"/> bytes
            onto the bus.
            </param>
            <param name="index">
            The zero-based byte index in <paramref name="buffer"/> at which
            to begin writting bytes onto the bus.
            </param>
            <param name="count">
            The number of bytes to be written onto the bus, or -1 to write bytes
            from <paramref name="index"/> to the end of <paramref name="buffer"/>.
            </param>
            <exception cref="T:System.ArgumentException">
            The sum of <paramref name="index"/> and <paramref name="count"/>
            is larger than the <paramref name="buffer"/> length.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is negative or <paramref name="count"/> is less than -1.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The method was called after the object was disposed.
            </exception>
        </member>
        <member name="M:CW.NETMF.Hardware.OneWire.WriteBit(System.Byte)">
            <summary>
            Writes a bit onto the bus.
            </summary>
            <param name="value">
            The bit to write onto the bus; the value is converted to boolean.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The method was called after the object was disposed.
            </exception>
        </member>
        <member name="M:CW.NETMF.Hardware.OneWire.WriteByte(System.Byte)">
            <summary>
            Writes a byte onto the bus.
            </summary>
            <param name="value">
            The byte to write onto the bus.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The method was called after the object was disposed.
            </exception>
        </member>
        <member name="M:CW.NETMF.Hardware.OneWire.Search(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Performs search operations on the 1-Wire bus.
            </summary>
            <param name="pattern">
            An array of bytes. When this method returns, the <paramref name="pattern"/>
            contains the specified byte array with the values between <paramref name="index"/>
            and (<paramref name="index"/> + 7) replaced with the identifier of a device
            discovered on the bus. Passing the value from previous successful search
            performs discovery of the next device.
            </param>
            <param name="deviation">
            The bit position where the search made a choice the last time it was
            run. This argument is 0 when a search is initiated, or the return
            value from previous successful search.
            </param>
            <param name="index">
            The zero-based byte index in <paramref name="pattern"/> at which
            to begin storing the device identifier.
            </param>
            <returns>
            -1 if the search failed (e.g. a device was connected to the bus
            during the search), 0 if there are no more devices to be discovered,
            otherwise the value of last <paramref name="deviation"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
            The number of bytes between <paramref name="index"/> and the end of
            <paramref name="pattern"/> is less than 8.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="pattern"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is negative.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The method was called after the object was disposed.
            </exception>
            <remarks>
            When one search has been performed, all slaves except of one should
            have entered an idle state and it is now possible to communicate with
            the active slave without specifically addressing it.
            </remarks>
        </member>
        <member name="M:CW.NETMF.Hardware.OneWire.ComputeCRC(System.Byte[],System.Int32,System.Int32,System.Byte)">
            <summary>
            Computes 8-bit cyclic redundancy check (CRC) using 1-Wire specification.
            </summary>
            <param name="buffer">
            An array of bytes from which the CRC is computed.
            </param>
            <param name="index">
            The zero-based byte index in <paramref name="buffer"/> at which
            to begin the calculation.
            </param>
            <param name="count">
            The number of bytes to be included in calculation, or -1 to include bytes
            from <paramref name="index"/> to the end of <paramref name="buffer"/>.
            </param>
            <param name="seed">
            A seed for the CRC calculation. Constantly passing the return value
            of this method as the seed argument computes the CRC value of a longer
            block of data.
            </param>
            <returns>
            Computed CRC value.
            </returns>
            <exception cref="T:System.ArgumentException">
            The sum of <paramref name="index"/> and <paramref name="count"/>
            is larger than the <paramref name="buffer"/> length.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is negative or <paramref name="count"/> is less than -1.
            </exception>
            <remarks>
            This method uses x^8 + x^5 + x^4 + 1 polynomial (CRC-8-Dallas/Maxim).
            </remarks>
        </member>
        <member name="M:CW.NETMF.Hardware.OneWire.ComputeCRC16(System.Byte[],System.Int32,System.Int32,System.UInt16)">
            <summary>
            Computes 16-bit cyclic redundancy check (CRC).
            </summary>
            <param name="buffer">
            An array of bytes from which the CRC is computed.
            </param>
            <param name="index">
            The zero-based byte index in <paramref name="buffer"/> at which
            to begin the calculation.
            </param>
            <param name="count">
            The number of bytes to be included in calculation, or -1 to include bytes
            from <paramref name="index"/> to the end of <paramref name="buffer"/>.
            </param>
            <param name="seed">
            A seed for the CRC calculation. Constantly passing the return value
            of this method as the seed argument computes the CRC value of a longer
            block of data.
            </param>
            <returns>
            Computed CRC value.
            </returns>
            <exception cref="T:System.ArgumentException">
            The sum of <paramref name="index"/> and <paramref name="count"/>
            is larger than the <paramref name="buffer"/> length.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is negative or <paramref name="count"/> is less than -1.
            </exception>
            <remarks>
            This method uses x^16 + x^15 + x^2 + 1 polynomial (CRC-16, also known
            as CRC-16-ANSI and CRC-16-IBM).
            </remarks>
        </member>
    </members>
</doc>
